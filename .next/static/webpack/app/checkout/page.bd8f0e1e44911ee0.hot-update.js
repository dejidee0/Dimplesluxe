"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/checkout/page",{

/***/ "(app-pages-browser)/./lib/payments/paypal.js":
/*!********************************!*\
  !*** ./lib/payments/paypal.js ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   capturePayPalPayment: function() { return /* binding */ capturePayPalPayment; },\n/* harmony export */   initializePayPalPayment: function() { return /* binding */ initializePayPalPayment; }\n/* harmony export */ });\nconst initializePayPalPayment = async (orderData)=>{\n    try {\n        const amount = orderData.total.toFixed(2);\n        const currency = orderData.currency;\n        const shipping = orderData.shipping.toFixed(2);\n        console.log(\"Sending PayPal request:\", {\n            amount,\n            currency,\n            orderId: orderData.orderId\n        });\n        const response = await fetch(\"/api/payments/paypal/initialize\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                email: orderData.customerEmail,\n                amount,\n                currency,\n                orderId: orderData.orderId,\n                orderNumber: orderData.orderNumber,\n                items: orderData.items,\n                shipping\n            })\n        });\n        if (!response.ok) {\n            const text = await response.text();\n            console.error(\"Non-OK response:\", response.status, text);\n            throw new Error(\"HTTP error \".concat(response.status, \": \").concat(text || \"No response body\"));\n        }\n        const contentType = response.headers.get(\"content-type\");\n        if (!contentType || !contentType.includes(\"application/json\")) {\n            const text = await response.text();\n            console.error(\"Non-JSON response:\", text);\n            throw new Error(\"Server returned non-JSON response\");\n        }\n        const data = await response.json();\n        if (!data.status) {\n            throw new Error(data.message || \"Payment initialization failed\");\n        }\n        console.log(\"Redirecting to PayPal:\", data.approve_url);\n        window.location.href = data.approve_url;\n        return data;\n    } catch (error) {\n        console.error(\"PayPal initialization error:\", error);\n        throw error;\n    }\n};\nconst capturePayPalPayment = async (orderId, payerId)=>{\n    try {\n        console.log(\"Capturing PayPal payment:\", {\n            orderId,\n            payerId\n        });\n        const response = await fetch(\"/api/payments/paypal/capture\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                orderId,\n                payerId\n            })\n        });\n        if (!response.ok) {\n            const text = await response.text();\n            console.error(\"Capture non-OK response:\", response.status, text);\n            throw new Error(\"HTTP error \".concat(response.status, \": \").concat(text || \"No response body\"));\n        }\n        const contentType = response.headers.get(\"content-type\");\n        if (!contentType || !contentType.includes(\"application/json\")) {\n            const text = await response.text();\n            console.error(\"Capture non-JSON response:\", text);\n            throw new Error(\"Server returned non-JSON response\");\n        }\n        const data = await response.json();\n        if (!data.status) {\n            throw new Error(data.message || \"Payment capture failed\");\n        }\n        return data;\n    } catch (error) {\n        console.error(\"PayPal capture error:\", error);\n        throw error;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9wYXltZW50cy9wYXlwYWwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxNQUFNQSwwQkFBMEIsT0FBT0M7SUFDNUMsSUFBSTtRQUNGLE1BQU1DLFNBQVNELFVBQVVFLEtBQUssQ0FBQ0MsT0FBTyxDQUFDO1FBQ3ZDLE1BQU1DLFdBQVdKLFVBQVVJLFFBQVE7UUFDbkMsTUFBTUMsV0FBV0wsVUFBVUssUUFBUSxDQUFDRixPQUFPLENBQUM7UUFFNUNHLFFBQVFDLEdBQUcsQ0FBQywyQkFBMkI7WUFDckNOO1lBQ0FHO1lBQ0FJLFNBQVNSLFVBQVVRLE9BQU87UUFDNUI7UUFFQSxNQUFNQyxXQUFXLE1BQU1DLE1BQU0sbUNBQW1DO1lBQzlEQyxRQUFRO1lBQ1JDLFNBQVM7Z0JBQ1AsZ0JBQWdCO1lBQ2xCO1lBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztnQkFDbkJDLE9BQU9oQixVQUFVaUIsYUFBYTtnQkFDOUJoQjtnQkFDQUc7Z0JBQ0FJLFNBQVNSLFVBQVVRLE9BQU87Z0JBQzFCVSxhQUFhbEIsVUFBVWtCLFdBQVc7Z0JBQ2xDQyxPQUFPbkIsVUFBVW1CLEtBQUs7Z0JBQ3RCZDtZQUNGO1FBQ0Y7UUFFQSxJQUFJLENBQUNJLFNBQVNXLEVBQUUsRUFBRTtZQUNoQixNQUFNQyxPQUFPLE1BQU1aLFNBQVNZLElBQUk7WUFDaENmLFFBQVFnQixLQUFLLENBQUMsb0JBQW9CYixTQUFTYyxNQUFNLEVBQUVGO1lBQ25ELE1BQU0sSUFBSUcsTUFDUixjQUFrQ0gsT0FBcEJaLFNBQVNjLE1BQU0sRUFBQyxNQUErQixPQUEzQkYsUUFBUTtRQUU5QztRQUVBLE1BQU1JLGNBQWNoQixTQUFTRyxPQUFPLENBQUNjLEdBQUcsQ0FBQztRQUN6QyxJQUFJLENBQUNELGVBQWUsQ0FBQ0EsWUFBWUUsUUFBUSxDQUFDLHFCQUFxQjtZQUM3RCxNQUFNTixPQUFPLE1BQU1aLFNBQVNZLElBQUk7WUFDaENmLFFBQVFnQixLQUFLLENBQUMsc0JBQXNCRDtZQUNwQyxNQUFNLElBQUlHLE1BQU07UUFDbEI7UUFFQSxNQUFNSSxPQUFPLE1BQU1uQixTQUFTb0IsSUFBSTtRQUVoQyxJQUFJLENBQUNELEtBQUtMLE1BQU0sRUFBRTtZQUNoQixNQUFNLElBQUlDLE1BQU1JLEtBQUtFLE9BQU8sSUFBSTtRQUNsQztRQUVBeEIsUUFBUUMsR0FBRyxDQUFDLDBCQUEwQnFCLEtBQUtHLFdBQVc7UUFDdERDLE9BQU9DLFFBQVEsQ0FBQ0MsSUFBSSxHQUFHTixLQUFLRyxXQUFXO1FBRXZDLE9BQU9IO0lBQ1QsRUFBRSxPQUFPTixPQUFPO1FBQ2RoQixRQUFRZ0IsS0FBSyxDQUFDLGdDQUFnQ0E7UUFDOUMsTUFBTUE7SUFDUjtBQUNGLEVBQUU7QUFFSyxNQUFNYSx1QkFBdUIsT0FBTzNCLFNBQVM0QjtJQUNsRCxJQUFJO1FBQ0Y5QixRQUFRQyxHQUFHLENBQUMsNkJBQTZCO1lBQUVDO1lBQVM0QjtRQUFRO1FBQzVELE1BQU0zQixXQUFXLE1BQU1DLE1BQU0sZ0NBQWdDO1lBQzNEQyxRQUFRO1lBQ1JDLFNBQVM7Z0JBQ1AsZ0JBQWdCO1lBQ2xCO1lBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQztnQkFBRVA7Z0JBQVM0QjtZQUFRO1FBQzFDO1FBRUEsSUFBSSxDQUFDM0IsU0FBU1csRUFBRSxFQUFFO1lBQ2hCLE1BQU1DLE9BQU8sTUFBTVosU0FBU1ksSUFBSTtZQUNoQ2YsUUFBUWdCLEtBQUssQ0FBQyw0QkFBNEJiLFNBQVNjLE1BQU0sRUFBRUY7WUFDM0QsTUFBTSxJQUFJRyxNQUNSLGNBQWtDSCxPQUFwQlosU0FBU2MsTUFBTSxFQUFDLE1BQStCLE9BQTNCRixRQUFRO1FBRTlDO1FBRUEsTUFBTUksY0FBY2hCLFNBQVNHLE9BQU8sQ0FBQ2MsR0FBRyxDQUFDO1FBQ3pDLElBQUksQ0FBQ0QsZUFBZSxDQUFDQSxZQUFZRSxRQUFRLENBQUMscUJBQXFCO1lBQzdELE1BQU1OLE9BQU8sTUFBTVosU0FBU1ksSUFBSTtZQUNoQ2YsUUFBUWdCLEtBQUssQ0FBQyw4QkFBOEJEO1lBQzVDLE1BQU0sSUFBSUcsTUFBTTtRQUNsQjtRQUVBLE1BQU1JLE9BQU8sTUFBTW5CLFNBQVNvQixJQUFJO1FBRWhDLElBQUksQ0FBQ0QsS0FBS0wsTUFBTSxFQUFFO1lBQ2hCLE1BQU0sSUFBSUMsTUFBTUksS0FBS0UsT0FBTyxJQUFJO1FBQ2xDO1FBRUEsT0FBT0Y7SUFDVCxFQUFFLE9BQU9OLE9BQU87UUFDZGhCLFFBQVFnQixLQUFLLENBQUMseUJBQXlCQTtRQUN2QyxNQUFNQTtJQUNSO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvcGF5bWVudHMvcGF5cGFsLmpzP2JkNzYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGluaXRpYWxpemVQYXlQYWxQYXltZW50ID0gYXN5bmMgKG9yZGVyRGF0YSkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBhbW91bnQgPSBvcmRlckRhdGEudG90YWwudG9GaXhlZCgyKTtcclxuICAgIGNvbnN0IGN1cnJlbmN5ID0gb3JkZXJEYXRhLmN1cnJlbmN5O1xyXG4gICAgY29uc3Qgc2hpcHBpbmcgPSBvcmRlckRhdGEuc2hpcHBpbmcudG9GaXhlZCgyKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhcIlNlbmRpbmcgUGF5UGFsIHJlcXVlc3Q6XCIsIHtcclxuICAgICAgYW1vdW50LFxyXG4gICAgICBjdXJyZW5jeSxcclxuICAgICAgb3JkZXJJZDogb3JkZXJEYXRhLm9yZGVySWQsXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFwiL2FwaS9wYXltZW50cy9wYXlwYWwvaW5pdGlhbGl6ZVwiLCB7XHJcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICAgIGVtYWlsOiBvcmRlckRhdGEuY3VzdG9tZXJFbWFpbCxcclxuICAgICAgICBhbW91bnQsXHJcbiAgICAgICAgY3VycmVuY3ksXHJcbiAgICAgICAgb3JkZXJJZDogb3JkZXJEYXRhLm9yZGVySWQsXHJcbiAgICAgICAgb3JkZXJOdW1iZXI6IG9yZGVyRGF0YS5vcmRlck51bWJlcixcclxuICAgICAgICBpdGVtczogb3JkZXJEYXRhLml0ZW1zLFxyXG4gICAgICAgIHNoaXBwaW5nLFxyXG4gICAgICB9KSxcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcclxuICAgICAgY29uc29sZS5lcnJvcihcIk5vbi1PSyByZXNwb25zZTpcIiwgcmVzcG9uc2Uuc3RhdHVzLCB0ZXh0KTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgIGBIVFRQIGVycm9yICR7cmVzcG9uc2Uuc3RhdHVzfTogJHt0ZXh0IHx8IFwiTm8gcmVzcG9uc2UgYm9keVwifWBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpO1xyXG4gICAgaWYgKCFjb250ZW50VHlwZSB8fCAhY29udGVudFR5cGUuaW5jbHVkZXMoXCJhcHBsaWNhdGlvbi9qc29uXCIpKSB7XHJcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJOb24tSlNPTiByZXNwb25zZTpcIiwgdGV4dCk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlcnZlciByZXR1cm5lZCBub24tSlNPTiByZXNwb25zZVwiKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG5cclxuICAgIGlmICghZGF0YS5zdGF0dXMpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGRhdGEubWVzc2FnZSB8fCBcIlBheW1lbnQgaW5pdGlhbGl6YXRpb24gZmFpbGVkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnNvbGUubG9nKFwiUmVkaXJlY3RpbmcgdG8gUGF5UGFsOlwiLCBkYXRhLmFwcHJvdmVfdXJsKTtcclxuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZGF0YS5hcHByb3ZlX3VybDtcclxuXHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIlBheVBhbCBpbml0aWFsaXphdGlvbiBlcnJvcjpcIiwgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGNhcHR1cmVQYXlQYWxQYXltZW50ID0gYXN5bmMgKG9yZGVySWQsIHBheWVySWQpID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc29sZS5sb2coXCJDYXB0dXJpbmcgUGF5UGFsIHBheW1lbnQ6XCIsIHsgb3JkZXJJZCwgcGF5ZXJJZCB9KTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCIvYXBpL3BheW1lbnRzL3BheXBhbC9jYXB0dXJlXCIsIHtcclxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG9yZGVySWQsIHBheWVySWQgfSksXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYXB0dXJlIG5vbi1PSyByZXNwb25zZTpcIiwgcmVzcG9uc2Uuc3RhdHVzLCB0ZXh0KTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgIGBIVFRQIGVycm9yICR7cmVzcG9uc2Uuc3RhdHVzfTogJHt0ZXh0IHx8IFwiTm8gcmVzcG9uc2UgYm9keVwifWBcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiY29udGVudC10eXBlXCIpO1xyXG4gICAgaWYgKCFjb250ZW50VHlwZSB8fCAhY29udGVudFR5cGUuaW5jbHVkZXMoXCJhcHBsaWNhdGlvbi9qc29uXCIpKSB7XHJcbiAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDYXB0dXJlIG5vbi1KU09OIHJlc3BvbnNlOlwiLCB0ZXh0KTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2VydmVyIHJldHVybmVkIG5vbi1KU09OIHJlc3BvbnNlXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcblxyXG4gICAgaWYgKCFkYXRhLnN0YXR1cykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZGF0YS5tZXNzYWdlIHx8IFwiUGF5bWVudCBjYXB0dXJlIGZhaWxlZFwiKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIlBheVBhbCBjYXB0dXJlIGVycm9yOlwiLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJpbml0aWFsaXplUGF5UGFsUGF5bWVudCIsIm9yZGVyRGF0YSIsImFtb3VudCIsInRvdGFsIiwidG9GaXhlZCIsImN1cnJlbmN5Iiwic2hpcHBpbmciLCJjb25zb2xlIiwibG9nIiwib3JkZXJJZCIsInJlc3BvbnNlIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlbWFpbCIsImN1c3RvbWVyRW1haWwiLCJvcmRlck51bWJlciIsIml0ZW1zIiwib2siLCJ0ZXh0IiwiZXJyb3IiLCJzdGF0dXMiLCJFcnJvciIsImNvbnRlbnRUeXBlIiwiZ2V0IiwiaW5jbHVkZXMiLCJkYXRhIiwianNvbiIsIm1lc3NhZ2UiLCJhcHByb3ZlX3VybCIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImNhcHR1cmVQYXlQYWxQYXltZW50IiwicGF5ZXJJZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/payments/paypal.js\n"));

/***/ })

});